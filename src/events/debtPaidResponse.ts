import type client from '../index';
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export = (client: client) => {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    client.on('interactionCreate', async (interaction) => {
        if (!interaction.isButton()) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
        const customId: string = interaction.customId;
        const guildId: string = interaction.guildId ?? ""
        const userID: string = interaction.user.id;
        const userName: string = interaction.user.username
        const userTag: string = interaction.user.discriminator

        const customId_list = customId.split(','); //[ 'creditor_..._transfering', 'userid' ]
        const debtorUserID: string = customId_list[1]
        const debtorUserName: string = customId_list[2]
        const debtorUserTag: string = customId_list[3]
        const allDebt = parseFloat(customId_list[4]); //‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ô generate paid ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÑ‡∏î‡πâ

        try {
            //Get debtorCheck data
            const debtorCheck = await prisma.debtorCheck.findMany({
                where: {
                    debtorUserId: debtorUserID,
                    creditorUserId: userID
                }
            });

                if (debtorCheck.length === 0 || userID === debtorUserID) { //‡πÄ‡∏ä‡πá‡∏Ñ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏´‡∏ô‡∏µ‡πâ‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏Å
                    interaction.reply(
                        {
                            embeds: [
                                {
                                    color: 0xF6FE01,
                                    title: `‚ö†Ô∏è **Error** ‚ö†Ô∏è`,
                                    description: `‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏π‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π ‡∏Ñ‡∏∏‡∏ì **${debtorUserName}#${debtorUserTag}** ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì **${userName}#${userTag}** ‡∏ô‡∏∞‡∏Ñ‡∏∞`,
                                }
                            ],
                            ephemeral: true,
                        }
                    )
                    return;
                }
        } catch (e) {
            console.log(e)
            return;
        }
    
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î
        if (customId_list[0] === 'creditor_approve_transfering') {
            if (allDebt <= 0) {
                try {
                    await prisma.debtorCheck.deleteMany({
                        where: {
                        debtorUserId: debtorUserID,
                        creditorUserId: userID,
                        },
                    });
                } catch (e) {
                    console.log(e)
                    return;
                }
            }
            else{
                try {
                    await prisma.debtorCheck.updateMany({
                        where: {
                        debtorUserId: debtorUserID,
                        creditorUserId: userID,
                        },
                        data: {
                        debtorAmount: allDebt,
                        },
                    });                                                
                } catch (e) {
                    console.log(e)
                    return;
                }
            }
            interaction.reply(
                {
                    embeds: [
                        {
                            author: {
                                name: `${userName}#${userTag}`,
                                icon_url: `${interaction.user.displayAvatarURL()}`,
                            },
                            color: 0x0099ff,
                            title: `‚úÖ **${userName}#${userTag}** ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô`,
                            description: `**${userName}#${userTag}** ‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì **@${debtorUserName}#${debtorUserTag}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ü©∑
                            
                            ‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å **${allDebt}** ‡∏ö‡∏≤‡∏ó‡∏ô‡∏∞‡∏Ñ‡∏∞`,
                        }
                    ],
                }
            );
    
        } else if (customId_list[0] === 'creditor_reject_transfering') {
            interaction.reply(
                {
                    embeds: [
                        {
                            author: {
                                name: `${userName}#${userTag}`,
                                icon_url: `${interaction.user.displayAvatarURL()}`,
                            },
                            color: 0xFE0101,
                            title: `‚ùå **${userName}#${userTag}** ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô`,
                            description: `**${userName}#${userTag}** ‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì **@${debtorUserName}#${debtorUserTag}** ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞`,
                        }
                    ],
                }
            );
        }
    });
};
